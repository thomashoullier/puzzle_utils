:PROPERTIES:
:CATEGORY: puzzle_utils
:END:

* Project setup
** DONE Add options to the cmake build
CLOSED: [2023-10-28 Sat 20:49]
Currently when we load the library elsewhere, all the build targets
are also included, which is not what we want.

* Documentation
** Latex
*** TODO Introduce what are ranges, views, algorithms over them
See https://en.cppreference.com/w/cpp/ranges

*** DONE Printing a range
CLOSED: [2023-10-20 Fri 18:33]
Basic thing.

*** TODO Document our ex_range_printing example

*** TODO Document the ex_multiple example
*** DONE iota range factory
CLOSED: [2023-10-20 Fri 18:33]
+ See https://en.cppreference.com/w/cpp/ranges/iota_view
+ Run the example for real in an example section of the build.

*** TODO Create a range from a list of numbers manually.
initializer_list?

*** TODO filter range adaptor
+ See https://en.cppreference.com/w/cpp/ranges/filter_view

*** TODO fold_left
+ Used as a way to sum.

*** TODO accumulate

** Doxygen
*** DONE Create doxygen documention of pzu
CLOSED: [2023-10-28 Sat 08:02]
We require only a description of the API of pzu.


* Test suite
** DONE Initiate the test suite.
CLOSED: [2023-10-24 Tue 21:31]
Create the test suite with the existing pzu library examples.

** DONE Add test coverage utility
CLOSED: [2023-10-27 Fri 15:39]

** DONE Test suite in CI
CLOSED: [2023-10-28 Sat 20:26]
** DONE Add the non-regression test case on print
CLOSED: [2023-10-25 Wed 19:18]
This is:

#+begin_src C++
  auto even = [](int i) { return 0 == i % 2; };
  std::views::iota(1,20) | std::views::filter(even) | pzu::rangePrinter;
#+end_src

** DONE Silence cout in the tests for RangePrinter
CLOSED: [2023-10-29 Sun 14:48]
RangePrinter works as intended, we want it to output to cout and only there
for simplicity.
But we do not want it to add noise in the test report.

+ ~std::cout.rdbuf(NULL)~ does not work: we still see the same output.
+ ~std::cout.setstate(std::ios_base::failbit);~  does not work either.
+ Where does ~fmt::print~ goes by default? I think to cstdio stdout, try
  disconnecting this.

-> We outputted to a nullstream in the tests.

** DONE Add project euler problems to the test suite
CLOSED: [2023-10-30 Mon 19:55]
+ Validate the results explicitely.

* Functions to implement
** DONE Create a library with its own namespace
CLOSED: [2023-10-22 Sun 17:28]
** DONE Predicate for "is multiple of X"
CLOSED: [2023-10-25 Wed 20:03]
Features:
+ Must be used like: ~| std::views::filter(pzu::is_multiple_of(5,3))~
+ We can do a variadic function, for multiple of X, Y, Z etc.
+ Generalize to all valid inputs for the ~%~ operator, try using an auto,
  or if it fails, an integral type.
** DONE Generalize is_multiple_of to && and ||
CLOSED: [2023-10-29 Sun 09:32]
We may want all the numbers which are simultaneously the multiples of
the given arguments, or which are the multiple of at least one of the arguments.
Call it maybe like this: ~pzu::is_multiple_of<and>(3,5)~,
~pzu::is_multiple_of<or>(3,5)~.
-> In fact we did not find a way to pass ~and~ or ~or~ to a template, we wrote
dedicated functions ~all~ and ~any~.

** TODO Think about a generalization of checking a binary predicate with any or all arguments.
It would be called like so: ~is<multiple><all>(3,5)~.
Only implement it when we encounter another predicate such as ~multiple~.
Is there already something similar in the standard?

** DONE Unbounded sequence for Fibonacci
CLOSED: [2023-11-04 Sat 10:45]
+ We can use a C++23 range generator, but they are not supported by gcc as of
<2023-11-01 Wed>. See Grimm2023.
+ See Brindle2021 for an implementation of fibonacci range.

** DONE Printing a view
CLOSED: [2023-10-22 Sun 17:28]
Implement a utility for printing views.
+ Features:
  + OK. Usage with the pipe syntax.
  + OK. Gives back the range at the other end of the pipe.
  + OK. Guard against infinite printing.
  + OK. Add the possibility of printing the first n elements for unbounded ranges.
  + OK. Replace std::enable_if_t with C++20 concepts.
+ Relevant links:
  + https://stackoverflow.com/questions/65676338/writing-a-c20-range-to-standard-output
  + https://stackoverflow.com/questions/74074633/how-do-you-make-a-pipeable-function-like-rangestot-with-range-v3-ranges

** DONE Add the option for RangePrinter to print to a different output stream.
CLOSED: [2023-10-29 Sun 10:25]
+ The default must still be std::cout.
+ We must still be able to call ~pzu::RangePrinter(10)~.
+ Call like ~pzu::RangePrinter(std::cout, 10)~ by overloading.

** DONE Sum of range items
CLOSED: [2023-10-29 Sun 21:41]
+ Use fold_left over addition probably, as it seems to take the range elements
  one by one.
+ Implement as a pipable thing. It is an endpoint to pipes, no need to pass
  any range to the next adaptor.
+ Do not implement a number of elements to sum. This can be done with take
  beforehand. fold_left does not have guards against infinite ranges either,
  so we don't have to implement these either.
+ The solution is to just define a class RangeSum which is called with
  an overloaded operator| over a range. It has a sum method which takes the
  range and returns the sum.
** TODO Get the nth element of a range.
We want to be able to do ~auto el = range | pzu::get_nth(4)~.
+ See std::advance applied to the iterator.
** TODO Even/Odd predicate
+ Must be callable with ~std::views::filter(pzu::is_odd)~.

* Maintenance
** HOLD Replace the external fmt library with the standard C++ when it becomes available
+ Use the C++23 <print> header when it becomes implemented in gcc.
  See https://en.cppreference.com/w/cpp/compiler_support/23

** DONE Bug in RangePrinter
CLOSED: [2023-10-23 Mon 21:18]
The following does not seem to work:
~std::views::iota(1,20) | std::views::filter(is_multiple_of_2) | pzu::rangePrinter~

+ This is not a SizedRange since it does not know its size in constant time.
+ Add the bug to a non-regression test.

We have solved the bug by changing the print RangePrinter method from:
~print (const View auto &range)~ to ~print (View auto range)~.
I think the reason may be that some ranges do need to modify their state
in order to know their length?

** TODO Simplify RangePrinter print method
We can have a private method ~format~ for generating a format string depending
on the range type.
The rationale is we want to avoid repeating ~(*ostream) << str~ twice, and hide
the complexity in private methods.

** TODO Simplify RangePrinter constructors
We have four heavily redundant constructors.
We can simplify them down to one constructor with default values.
For ~print_length~, we wish to distinguish between user-provided value and
default value, we can use ~std::optional~ tricks for this.
-> We were not able to find a single constructor which works in all cases.

** DONE RangePrinter: use const references everywhere
CLOSED: [2023-10-30 Mon 18:43]
It seems we have forgotten to pass arguments by const reference?
Is there anything forbidding this?

+ The operation ~range | std::views::take()~ cannot work on a const reference to
  range.

** DONE BUG: Project Euler problem 1.
CLOSED: [2023-10-30 Mon 19:55]
This code does not compile:

#+begin_src C++
  auto pzu_sum = std::views::iota(1,1000)
    | std::views::filter(pzu::is_multiple_of_any(3,5))
    | pzu::rangeSum;
#+end_src

** TODO Are our pipeable objects range adaptors?
With range adaptors, we can do things like composing them without providing a
range.
Can we do that here?

Something like ~auto foo = take(10) | rangePrinter~ and then ~range | foo~.

** HOLD Use std::generator when support is added to gcc
std::generator is useful to create ranges. It is unsupported as of
<2023-11-04 Sat>.
+ Use it in the Fibonacci range.
